[{"title":"《吴恩达机器学习训练秘籍》读书笔记","date":"2018-11-06T12:37:55.000Z","path":"2018/11/06/deeplearning-ai/","content":"<h2 id=\"关于训练集、测试集、开发集\"><a href=\"#关于训练集、测试集、开发集\" class=\"headerlink\" title=\"关于训练集、测试集、开发集\"></a>关于训练集、测试集、开发集</h2><p><strong>训练集</strong>：用于运行算法，训练模型。</p>\n<p><strong>开发集</strong>：也被成为验证集，用于调整参数，选择特征，对学习算法做出其他决定。</p>\n<p><strong>测试集</strong>：用于评估算法的性能，但不会据此改变学习算法或参数。选择你最终期望要去处理的数据作为测试集，而不是一个恰好拥有的训练集样本。</p>\n<p><strong>开发集和测试集的分布应该保持一致。</strong></p>\n<a id=\"more\"></a>\n<p>开发集的任务是，让算法在所有的任务上都能表现优异。而不是仅仅在一些数据上表现良好，在另一些数据上表现差，泛化性能差。</p>\n<p>通常来说，开发集（验证集）的样本容量应该在1000到10000个样本之间。从而有利于检测出那些不易察觉的效果提升。吴恩达举了一个算法从90%到90.1%的差异如何体现的例子，他指出，当样本容量达到10000时，我们察觉到0.1%的性能提升。</p>\n<p>在总体数量较小（如100到10000个）的情况下，我们可以将整体的30%作为测试集。</p>\n<p>当数据总量不断增长，分配给测试集和验证集的比例不断降低。开发集和测试集的规模并不是越大越好。</p>\n<p>18.11.6待更新</p>\n","tags":[{"name":"deeplearning","slug":"deeplearning","permalink":"http://yoursite.com/tags/deeplearning/"}]},{"title":"numpy&&pandas基础","date":"2018-11-06T12:35:37.000Z","path":"2018/11/06/numpyfund/","content":"<h2 id=\"numpy\"><a href=\"#numpy\" class=\"headerlink\" title=\"numpy\"></a>numpy</h2><h3 id=\"numpy的属性\"><a href=\"#numpy的属性\" class=\"headerlink\" title=\"numpy的属性\"></a>numpy的属性</h3><p>ndim维度</p>\n<p>shape形状</p>\n<p>size元素个数</p>\n<a id=\"more\"></a>\n<h3 id=\"数组创建\"><a href=\"#数组创建\" class=\"headerlink\" title=\"数组创建\"></a>数组创建</h3><p>创建</p>\n<p>np.array([1, 2, 3])</p>\n<p>np.array([[1, 2, 3], [4, 5, 6]])</p>\n<p>指定数据类型(int64)</p>\n<p>np.array([1, 2, 3], dtype = int)</p>\n<p>创建全零数组</p>\n<p>np.zeros((3, 4))</p>\n<p>创建全一数组</p>\n<p>np.ones((3, 4))</p>\n<p>创建全空数组(每个数接近0)</p>\n<p>np.empty((3, 4))</p>\n<p>arrange指定范围，范围是[1, 12)，步长为2</p>\n<p>np.arrange(1, 12, 2)</p>\n<p>reshape改变形状</p>\n<p>np.arrange(12).reshape((3, 4))</p>\n<p><strong>linspace分割开始端1与结束端10的数据，生成20个数据</strong></p>\n<p>np.linspace(1, 10, 20)</p>\n<h3 id=\"运算\"><a href=\"#运算\" class=\"headerlink\" title=\"运算\"></a>运算</h3><p>a与b同行同列，可进行加减乘运算，进行乘运算时，对应位置相乘</p>\n<p>c=a+b c=a-b c=a*b</p>\n<p>numpy中包含数学工具</p>\n<p>c =  np.sin(a)</p>\n<p>矩阵乘法dot</p>\n<p>c = np.dot(a, b)</p>\n<p>在脚本中对<code>print</code>函数进行一些修改可以进行逻辑判断,生成逻辑数组</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(b&lt;<span class=\"number\">3</span>)  </span><br><span class=\"line\"><span class=\"comment\"># array([ True,  True,  True, False], dtype=bool)</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"一些函数\"><a href=\"#一些函数\" class=\"headerlink\" title=\"一些函数\"></a>一些函数</h3><p>如果你需要对行或者列进行查找运算，就需要在上述代码中为 axis 进行赋值。 当axis的值为0的时候，将会以列作为查找单元， 当axis的值为1的时候，将会以行作为查找单元。 </p>\n<p><code>argmin()</code> 和 <code>argmax()</code> 两个函数分别对应着求矩阵中最小元素和最大元素的索引。 </p>\n<p>np.sum(a, axis = 0)</p>\n<p>np.min(a, axis = 1)</p>\n<p>np.max(a)</p>\n<p>np.mean(a)</p>\n<p>np.median(a)</p>\n<p>np.cumsum(a)累加函数，每次输出当前和</p>\n<p>np.diff(a) 累差运算函数，计算每行后一项与前一项之差</p>\n<p>np.transpose(a)转置，同理还可以用a.T</p>\n<p>np.sort(a)每一行按顺序排列</p>\n<p>np.lip(a, 50, 100)</p>\n<p>lip(Array,Array_min,Array_max)，让函数判断矩阵中元素是否有比最小值小的或者比最大值大的元素，并将这些指定的元素转换为最小值或者最大值。 </p>\n<p>a.flatten() 将矩阵变为1D张量</p>\n<h3 id=\"随机生成数组\"><a href=\"#随机生成数组\" class=\"headerlink\" title=\"随机生成数组\"></a>随机生成数组</h3><p><strong>rand函数根据给定维度生成[0,1)之间的数据，包含0，不包含1 </strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">np.random.rand(<span class=\"number\">4</span>,<span class=\"number\">2</span>)</span><br></pre></td></tr></table></figure>\n<p><strong>randn函数返回一个或一组样本，具有标准正态分布。 </strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">np.random.randn(<span class=\"number\">2</span>,<span class=\"number\">4</span>)</span><br></pre></td></tr></table></figure>\n<p>以上函数没有输入参数时，输出单个数据</p>\n<p><strong>random返回随机的浮点数 </strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">np.random.random((<span class=\"number\">2</span>,<span class=\"number\">2</span>))</span><br></pre></td></tr></table></figure>\n<p><strong>permutation返回一个随机排列 </strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>np.random.permutation(<span class=\"number\">10</span>)</span><br><span class=\"line\">array([<span class=\"number\">1</span>, <span class=\"number\">7</span>, <span class=\"number\">4</span>, <span class=\"number\">3</span>, <span class=\"number\">0</span>, <span class=\"number\">9</span>, <span class=\"number\">2</span>, <span class=\"number\">5</span>, <span class=\"number\">8</span>, <span class=\"number\">6</span>])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>np.random.permutation([<span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">9</span>, <span class=\"number\">12</span>, <span class=\"number\">15</span>])</span><br><span class=\"line\">array([<span class=\"number\">15</span>,  <span class=\"number\">1</span>,  <span class=\"number\">9</span>,  <span class=\"number\">4</span>, <span class=\"number\">12</span>])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>arr = np.arange(<span class=\"number\">9</span>).reshape((<span class=\"number\">3</span>, <span class=\"number\">3</span>))</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>np.random.permutation(arr)</span><br><span class=\"line\">array([[<span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>],</span><br><span class=\"line\">       [<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>],</span><br><span class=\"line\">       [<span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]])</span><br></pre></td></tr></table></figure>\n<h2 id=\"pandas\"><a href=\"#pandas\" class=\"headerlink\" title=\"pandas\"></a>pandas</h2><p>pandas待更新 18.11.6</p>\n","tags":[{"name":"numpy","slug":"numpy","permalink":"http://yoursite.com/tags/numpy/"}]},{"title":"kaggle之digit recognizer","date":"2018-11-06T12:33:33.000Z","path":"2018/11/06/digit-recognizer/","content":"<p>用keras重做了一遍kaggle上的mnist数字识别，正确率98%，还有待提高</p>\n","tags":[{"name":"kaggle","slug":"kaggle","permalink":"http://yoursite.com/tags/kaggle/"}]},{"title":"面向对象编程-Python","date":"2018-10-20T10:33:39.000Z","path":"2018/10/20/pythonon-object/","content":"<p>​    在看huangyi-Lee机器学习课程作业代码的时候，发现有一些python的代码似懂非懂，但像是类、面向对象编程的内容。于是顺便学一下python面向对象编程的知识，此前也学过C++、Java，想必理解起来不是很难。</p>\n<p>​    本文基于廖雪峰的python3教程。</p>\n<h2 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h2><p>​    面向对象编程——Object Oriented Programming，简称OOP，是一种程序设计思想。OOP把对象作为程序的基本单元，一个对象包含了数据和操作数据的函数。 </p>\n<p>​    在Python中，所有数据类型都可以视为对象，当然也可以自定义对象。自定义的对象数据类型就是面向对象中的类（Class）的概念。 </p>\n<p>​    如果要打印一个学生的成绩，首先必须创建出这个学生对应的对象，然后，给对象发一个<code>print_score</code>消息，让对象自己把自己的数据打印出来。 </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, name, score)</span>:</span></span><br><span class=\"line\">        self.name = name</span><br><span class=\"line\">        self.score = score</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">print_score</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        print(<span class=\"string\">\"%s : %s\"</span> % (self.name, self.score))</span><br><span class=\"line\"></span><br><span class=\"line\">stu1 = Student(<span class=\"string\">\"Tom\"</span>, <span class=\"number\">99</span>)</span><br><span class=\"line\">stu1.print_score()</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h2 id=\"类和实例\"><a href=\"#类和实例\" class=\"headerlink\" title=\"类和实例\"></a>类和实例</h2><p>​    面向对象的设计思想是抽象出Class，根据Class创建Instance。 </p>\n<p>​    类是一个模板，而实例像是类构造出的对象。</p>\n<p>定义类</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">\t<span class=\"keyword\">pass</span></span><br></pre></td></tr></table></figure>\n<p>​    注意到<code>__init__</code>方法的第一个参数永远是<code>self</code>，表示创建的实例本身，因此，在<code>__init__</code>方法内部，就可以把各种属性绑定到<code>self</code>，因为<code>self</code>就指向创建的实例本身。 </p>\n<h2 id=\"数据封装\"><a href=\"#数据封装\" class=\"headerlink\" title=\"数据封装\"></a>数据封装</h2><p>​    1.调用容易，但不知道内部细节。</p>\n<p>​    2.封装也可以给类增加方法。</p>\n<h2 id=\"访问限制\"><a href=\"#访问限制\" class=\"headerlink\" title=\"访问限制\"></a>访问限制</h2><p>​    虽然数据被封装，但外部扔可以用类名来访问类内部的数据。想要数据不被外部访问，可以再变量名前加两个‘_’，如：self.__score =  score。此时，该变量成为私有变量（private variable）。</p>\n<p>​    变量名类似<code>__xxx__</code>，以双下划线开头，并且以双下划线结尾的是特殊变量，特殊变量是可以直接访问的，不是private变量，因此不能用<code>__name__</code>、<code>__score__</code>这样的变量名。 </p>\n<p>​    不能直接访问<code>__name</code>是因为Python解释器对外把<code>__name</code>变量改成了<code>_Student__name</code>，所以，仍然可以通过<code>_Student__name</code>来访问<code>__name</code>变量。</p>\n<h2 id=\"继承和多态\"><a href=\"#继承和多态\" class=\"headerlink\" title=\"继承和多态\"></a>继承和多态</h2><p>继承：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Animal</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        print(<span class=\"string\">'Animal is running...'</span>)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Dog</span><span class=\"params\">(Animal)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Cat</span><span class=\"params\">(Animal)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br></pre></td></tr></table></figure>\n<p>多态：</p>\n<p>在子类中修改父类的代码</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Dog</span><span class=\"params\">(Animal)</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        print(<span class=\"string\">'Dog is running...'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Cat</span><span class=\"params\">(Animal)</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        print(<span class=\"string\">'Cat is running...'</span>)</span><br></pre></td></tr></table></figure>\n<p>在继承关系中，如果一个实例的数据类型是某个子类，那它的数据类型也可以被看做是父类。 </p>\n<p>任何依赖<code>Animal</code>作为参数的函数或者方法都可以不加修改地正常运行，原因就在于多态。 </p>\n<h3 id=\"鸭子类型\"><a href=\"#鸭子类型\" class=\"headerlink\" title=\"鸭子类型\"></a>鸭子类型</h3><p>此处值得一提的是动态语言的“鸭子类型”，一个对象只要“看起来像鸭子，走起路来像鸭子”，那它就可以被看做是鸭子。 </p>\n<p>如果一个函数中的参数为带有run（）函数的父类，那么在java等静态语言中，传入的参数只能是父类或继承父类的子类。</p>\n<p>但在静态语言中，只要带有run（）函数就可以是上述函数的参数。不一定要传入真正的文件对象，完全可以传入任何实现了run（）方法的对象。 </p>\n<h2 id=\"获取对象信息\"><a href=\"#获取对象信息\" class=\"headerlink\" title=\"获取对象信息\"></a>获取对象信息</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; hasattr(obj, &apos;x&apos;) # 有属性&apos;x&apos;吗？</span><br><span class=\"line\">True</span><br><span class=\"line\">&gt;&gt;&gt; obj.x</span><br><span class=\"line\">9</span><br><span class=\"line\">&gt;&gt;&gt; hasattr(obj, &apos;y&apos;) # 有属性&apos;y&apos;吗？</span><br><span class=\"line\">False</span><br><span class=\"line\">&gt;&gt;&gt; setattr(obj, &apos;y&apos;, 19) # 设置一个属性&apos;y&apos;</span><br><span class=\"line\">&gt;&gt;&gt; hasattr(obj, &apos;y&apos;) # 有属性&apos;y&apos;吗？</span><br><span class=\"line\">True</span><br><span class=\"line\">&gt;&gt;&gt; getattr(obj, &apos;y&apos;) # 获取属性&apos;y&apos;</span><br><span class=\"line\">19</span><br><span class=\"line\">&gt;&gt;&gt; obj.y # 获取属性&apos;y&apos;</span><br><span class=\"line\">19</span><br></pre></td></tr></table></figure>\n<p>​    </p>\n","tags":[{"name":"Python","slug":"Python","permalink":"http://yoursite.com/tags/Python/"}]},{"title":"life goes on","date":"2018-09-13T17:13:45.000Z","path":"2018/09/14/life-goes-on/","content":"<p>胡乱的生活，是一团乱麻。</p>\n<p>算法比赛，web开发，中国软件杯。上述的事情我一点也没有做好。本不该是这样的，我大一的抱负是一点也没有实现，从初入大学到了现在，我逃避了很多事，选择了一条安稳的道路，和众多的人流一起走着，慢慢地我的血性也磨去了吗。难道我做到的就只是复习然后考上现在的大学？</p>\n<p>有一种虚无的感觉在我的心里，我不知道自己会这么无力，拒绝不了的本性，是我没有做到。</p>\n<p>我不愿去提起那些没有做到的事情，而更倾向于选择简单的一面。是我在逃避着，然后选择性地遗忘。暑假前后是这样、现在也是这样，给我的感觉就是——我在被带着走，是我的天性使然，还是生活的大锅在温吞地煮着我呢。</p>\n<p>看lpl季后赛的时候，解说念了两句诗：男儿何不带吴钩，收取关中五十州，出自李贺的《南园十三首其五》。我很喜欢这诗，是抱负的力量，这是我原本拥有的力量，不想被生活打磨，而是我来砥砺生活。</p>\n<p>是夜。</p>\n","tags":[{"name":"随笔","slug":"随笔","permalink":"http://yoursite.com/tags/随笔/"}]},{"title":"http协议","date":"2018-09-11T10:22:41.000Z","path":"2018/09/11/httpxieyi/","content":"<h1 id=\"http协议\"><a href=\"#http协议\" class=\"headerlink\" title=\"http协议\"></a>http协议</h1><blockquote>\n<p>HTTP协议是Hyper Text Transfer Protocol（超文本传输协议）的缩写,是用于从万维网</p>\n<p>（WWW，World Wide Web ）</p>\n<p>服务器传输超文本到本地浏览器的传送协议。<br>HTTP是一个基于TCP/IP通信协议来传递数据（HTML 文件, 图片文件, 查询结果等）。<br>HTTP是一个属于应用层的面向对象的协议，由于其简捷、快速的方式，适用于分布式超媒体信息系统。</p>\n<p>它于1990年提出，经过几年的使用与发展，得到不断地完善和扩展。<br>HTTP协议工作于客户端-服务端架构上。浏览器作为HTTP客户端通过URL向HTTP服务端即WEB服务器</p>\n<p>发送所有请求。Web服务器根据接收到的请求后，向客户端发送响应信息。</p>\n</blockquote>\n<a id=\"more\"></a>\n<h2 id=\"1HTTP请求\"><a href=\"#1HTTP请求\" class=\"headerlink\" title=\"1HTTP请求\"></a>1HTTP请求</h2><p>客户端发送一个HTTP请求到服务器的请求消息包括以下格式：</p>\n<p>请求行（request line）、请求头部（header）、空行和请求数据四个部分组成。</p>\n<p> Get请求例子：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET /562f25980001b1b106000338.jpg HTTP/1.1</span><br><span class=\"line\"></span><br><span class=\"line\">Host    img.mukewang.com</span><br><span class=\"line\"></span><br><span class=\"line\">User-Agent    Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) </span><br><span class=\"line\"></span><br><span class=\"line\">Accept    image/webp,image/*,*/*;q=0.8</span><br><span class=\"line\"></span><br><span class=\"line\">Referer    http://www.imooc.com/</span><br><span class=\"line\"></span><br><span class=\"line\">Accept-Encoding    gzip, deflate, sdch</span><br><span class=\"line\"></span><br><span class=\"line\">Accept-Language    zh-CN,zh;q=0.8</span><br></pre></td></tr></table></figure>\n<ul>\n<li>第一部分：请求行，用来说明请求类型,要访问的资源以及所使用的HTTP版本.</li>\n<li>第二部分：请求头部，紧接着请求行（即第一行）之后的部分，用来说明服务器要使用的附加信息<br>HOST将指出请求的目的地.<br>User-Agent,服务器端和客户端脚本都能访问它,它是浏览器类型检测逻辑的重要基础.该信息由你的浏览器来定义,。</li>\n<li>第三部分：空行，请求头部后面的空行是必须的<br>即使第四部分的请求数据为空，也必须有空行。</li>\n<li>第四部分：请求数据也叫主体，可以添加任意的其他数据。<br>这个例子的请求数据为空。</li>\n</ul>\n<p>POST请求例子：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">POST / HTTP1.1</span><br><span class=\"line\"></span><br><span class=\"line\">Host:www.wrox.com</span><br><span class=\"line\"></span><br><span class=\"line\">User-Agent:Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; .NET CLR 2.0.50727</span><br><span class=\"line\"></span><br><span class=\"line\">Content-Type:application/x-www-form-urlencoded</span><br><span class=\"line\"></span><br><span class=\"line\">Content-Length:40</span><br><span class=\"line\"></span><br><span class=\"line\">Connection: Keep-Alive</span><br><span class=\"line\"></span><br><span class=\"line\">name=Professional%20Ajax&amp;publisher=Wiley</span><br></pre></td></tr></table></figure>\n<ul>\n<li>第一部分：请求行，第一行明了是post请求，以及http1.1版本。</li>\n<li>第二部分：请求头部，第二行至第六行。</li>\n<li>第三部分：空行，第七行的空行。</li>\n<li>第四部分：请求数据，第八行。</li>\n</ul>\n<h2 id=\"2HTTP之响应消息Response\"><a href=\"#2HTTP之响应消息Response\" class=\"headerlink\" title=\"2HTTP之响应消息Response\"></a>2HTTP之响应消息Response</h2><p>一般情况下，服务器接收并处理客户端发过来的请求后会返回一个HTTP的响应消息。</p>\n<p>HTTP响应也由四个部分组成，分别是：状态行、消息报头、空行和响应正文。</p>\n<p> 例子</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HTTP/1.1 200 OK</span><br><span class=\"line\"></span><br><span class=\"line\">Date: Fri, 22 May 2009 06:07:21 GMT</span><br><span class=\"line\"></span><br><span class=\"line\">Content-Type: text/html; charset=UTF-8</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">      &lt;head&gt;&lt;/head&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">      &lt;body&gt;</span><br><span class=\"line\">            &lt;!--body goes here--&gt;</span><br><span class=\"line\">      &lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>第一部分：状态行，由HTTP协议版本号， 状态码， 状态消息 三部分组成。<br>第一行为状态行，（HTTP/1.1）表明HTTP版本为1.1版本，状态码为200，状态消息为（ok）</li>\n<li>第二部分：消息报头，用来说明客户端要使用的一些附加信息<br>第二行和第三行为消息报头，Date:生成响应的日期和时间；Content-Type:指定了MIME类型的HTML(text/html),编码类型是UTF-8</li>\n<li>第三部分：空行，消息报头后面的空行是必须的</li>\n<li>第四部分：响应正文，服务器返回给客户端的文本信息。<br>空行后面的html部分为响应正文。</li>\n</ul>\n<h2 id=\"3HTTP之状态码\"><a href=\"#3HTTP之状态码\" class=\"headerlink\" title=\"3HTTP之状态码\"></a>3HTTP之状态码</h2><p>状态代码有三位数字组成，第一个数字定义了响应的类别，共分五种类别:</p>\n<ul>\n<li>1xx：指示信息–表示请求已接收，继续处理</li>\n<li>2xx：成功–表示请求已被成功接收、理解、接受</li>\n<li>3xx：重定向–要完成请求必须进行更进一步的操作</li>\n<li>4xx：客户端错误–请求有语法错误或请求无法实现</li>\n<li>5xx：服务器端错误–服务器未能实现合法的请求</li>\n</ul>\n<p>常见状态码：</p>\n<blockquote>\n<p>200 OK //客户端请求成功<br>400 Bad Request //客户端请求有语法错误，不能被服务器所理解<br>401 Unauthorized //请求未经授权，这个状态代码必须和WWW-Authenticate报头域一起使用<br>403 Forbidden //服务器收到请求，但是拒绝提供服务<br>404 Not Found //请求资源不存在，eg：输入了错误的URL<br>500 Internal Server Error //服务器发生不可预期的错误<br>503 Server Unavailable //服务器当前不能处理客户端的请求，一段时间后可能恢复正常<br>更多状态码<a href=\"https://link.jianshu.com/?t=http%3A%2F%2Fwww.runoob.com%2Fhttp%2Fhttp-status-codes.html\" target=\"_blank\" rel=\"noopener\">http://www.runoob.com/http/http-status-codes.html</a></p>\n</blockquote>\n<h2 id=\"4HTTP请求方法\"><a href=\"#4HTTP请求方法\" class=\"headerlink\" title=\"4HTTP请求方法\"></a>4HTTP请求方法</h2><p>据HTTP标准，HTTP请求可以使用多种请求方法。<br>HTTP1.0定义了三种请求方法： GET, POST 和 HEAD方法。<br>HTTP1.1新增了五种请求方法：OPTIONS, PUT, DELETE, TRACE 和 CONNECT 方法。</p>\n<ul>\n<li>GET 请求指定的页面信息，并返回实体主体。</li>\n<li>HEAD 类似于get请求，只不过返回的响应中没有具体的内容，用于获取报头</li>\n<li>POST 向指定资源提交数据进行处理请求（例如提交表单或者上传文件）。数据被包含在请求体中。<br>POST请求可能会导致新的资源的建立和/或已有资源的修改。</li>\n<li>PUT 从客户端向服务器传送的数据取代指定的文档的内容。</li>\n<li>DELETE 请求服务器删除指定的页面。</li>\n<li>CONNECT HTTP/1.1协议中预留给能够将连接改为管道方式的代理服务器。</li>\n<li>OPTIONS 允许客户端查看服务器的性能。</li>\n<li>TRACE 回显服务器收到的请求，主要用于测试或诊断。</li>\n</ul>\n","tags":[{"name":"http","slug":"http","permalink":"http://yoursite.com/tags/http/"}]},{"title":"NumpyArrayCreat","date":"2018-05-01T08:07:20.000Z","path":"2018/05/01/NumpyArrayCreat/","content":"<h1 id=\"numpy中数组的创建和属性\"><a href=\"#numpy中数组的创建和属性\" class=\"headerlink\" title=\"numpy中数组的创建和属性\"></a>numpy中数组的创建和属性</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/env python3</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding utf-8 -*-</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#dtype指定类型</span></span><br><span class=\"line\"><span class=\"comment\">#int（64位） int32  float（64位） float32</span></span><br><span class=\"line\">array = np.array([[<span class=\"number\">1</span>, <span class=\"number\">3.988</span>, <span class=\"number\">4</span>],[<span class=\"number\">12</span>, <span class=\"number\">12</span> , <span class=\"number\">3</span>]], dtype = int)</span><br><span class=\"line\">print(array)</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(array.ndim)</span><br><span class=\"line\"><span class=\"comment\">#输出维度</span></span><br><span class=\"line\"></span><br><span class=\"line\">print(array.size)</span><br><span class=\"line\"><span class=\"comment\">#元素个数</span></span><br><span class=\"line\"></span><br><span class=\"line\">print(array.shape)</span><br><span class=\"line\"><span class=\"comment\">#行数和列数tuple</span></span><br><span class=\"line\"></span><br><span class=\"line\">all_zero = np.zeros((<span class=\"number\">2</span>,<span class=\"number\">2</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">all_one = np.ones((<span class=\"number\">2</span>,<span class=\"number\">2</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">a = np.empty((<span class=\"number\">2</span>, <span class=\"number\">2</span>))</span><br><span class=\"line\">print(a)</span><br><span class=\"line\"><span class=\"comment\">#全空数组，实际为每个数接近于0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#[[1.39431843e-311 1.39431843e-311]</span></span><br><span class=\"line\"><span class=\"comment\">#[0.00000000e+000 1.39424620e-311]]</span></span><br><span class=\"line\"></span><br><span class=\"line\">array_arange = np.arange(<span class=\"number\">10</span>, <span class=\"number\">20</span>, <span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"comment\">#创造一个[10,20) 步长为2的数组</span></span><br><span class=\"line\"></span><br><span class=\"line\">array_arange.reshape((<span class=\"number\">4</span>,<span class=\"number\">5</span>))</span><br><span class=\"line\"><span class=\"comment\">#改变数组的形状</span></span><br><span class=\"line\"></span><br><span class=\"line\">a = np.linspace(<span class=\"number\">1</span>, <span class=\"number\">10</span>, <span class=\"number\">20</span>)</span><br><span class=\"line\"><span class=\"comment\">#开始为1，结束为10，并且分割成20个数据</span></span><br><span class=\"line\"><span class=\"comment\">#创造线段型数据</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#同样的有</span></span><br><span class=\"line\">a = np.linspace(<span class=\"number\">1</span>, <span class=\"number\">10</span>, <span class=\"number\">20</span>).reshape((<span class=\"number\">4</span>, <span class=\"number\">5</span>))</span><br></pre></td></tr></table></figure>\n","tags":[{"name":"numpy","slug":"numpy","permalink":"http://yoursite.com/tags/numpy/"}]},{"title":"Python基础语法","date":"2018-04-06T14:32:58.000Z","path":"2018/04/06/python/","content":"<h3 id=\"变量与编码\"><a href=\"#变量与编码\" class=\"headerlink\" title=\"变量与编码\"></a>变量与编码</h3><p>‘#’ 注释</p>\n<p>字符串可用’ 或者” “注释，用\\转义字符来标识 ‘ 或 “</p>\n<p>布尔值为 True 和 False，可以用and or 和 not （与或非）运算</p>\n<p>空值：None，不等同于0，空值是一个特殊的数值，0有特殊意义</p>\n<p>变量，必须是字母数字和下划线的组合，且不能以数字开头</p>\n<a id=\"more\"></a>\n<p>Python不必声明变量</p>\n<p><strong>关于变量</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x = <span class=\"number\">1</span>;</span><br><span class=\"line\">y = x;</span><br><span class=\"line\">y = <span class=\"number\">2</span>;</span><br><span class=\"line\">print(x);</span><br><span class=\"line\">x = <span class=\"number\">2</span>;</span><br><span class=\"line\">print(x);</span><br></pre></td></tr></table></figure>\n<p>/相当于浮点数除法，//表示C中的整型整数相除</p>\n<p>对整数和浮点数的大小没有限制，但是超出一定范围表示为inf（无限大</p>\n<p><code>ord()</code>函数获取字符的整数表示，<code>chr()</code>函数把编码转换为对应的字符</p>\n<p><code>len()</code>函数计算的是<code>str</code>的字符数</p>\n<p>为了避免乱码问题，应当始终坚持使用UTF-8编码对<code>str</code>和<code>bytes</code>进行转换。</p>\n<p><strong>字符编码</strong></p>\n<p>由于Python源代码也是一个文本文件，所以，当你的源代码中包含中文的时候，在保存源代码时，就需要务必指定保存为UTF-8编码。当Python解释器读取源代码时，为了让它按UTF-8编码读取，我们通常在文件开头写上这两行：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/usr/bin/env python3</span><br><span class=\"line\"># -*- coding: utf-8 -*-</span><br></pre></td></tr></table></figure>\n<p>第一行注释是为了告诉Linux/OS X系统，这是一个Python可执行程序，Windows系统会忽略这个注释；</p>\n<p>第二行注释是为了告诉Python解释器，按照UTF-8编码读取源代码，否则，你在源代码中写的中文输出可能会有乱码。<br><strong>格式化</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(<span class=\"string\">'Hello, %s'</span> % <span class=\"string\">'world'</span>)</span><br><span class=\"line\">print(<span class=\"string\">'Hi, %s, you have $%d.'</span> % (<span class=\"string\">'Michael'</span>, <span class=\"number\">1000000</span>))</span><br></pre></td></tr></table></figure>\n<p>输出为</p>\n<blockquote>\n<p>Hello, world<br>Hi, Michael, you have $1000000.</p>\n</blockquote>\n<p>类似于C的常见的占位符有</p>\n<p>%d 整数</p>\n<p>%f 浮点数</p>\n<p>%s 字符串</p>\n<p>%x 十六进制整数</p>\n<p>位数控制，前置0也类似C</p>\n<p>%.2d %2d %0d</p>\n<h3 id=\"数据容器\"><a href=\"#数据容器\" class=\"headerlink\" title=\"数据容器\"></a><strong>数据容器</strong></h3><p>容器这个词让我想到了<del>圣杯战争</del>数据结构如vector、set</p>\n<p><strong>list</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name = [<span class=\"string\">'a'</span>,  <span class=\"string\">'b'</span>,  <span class=\"string\">'c'</span>]</span><br><span class=\"line\"><span class=\"comment\">#init a list</span></span><br><span class=\"line\">len(name)</span><br><span class=\"line\"><span class=\"comment\">#ouput the number of members</span></span><br></pre></td></tr></table></figure>\n<p>可以用索引访问，如name[1]</p>\n<p>当索引超出了范围时，Python会报一个<code>IndexError</code>错误，所以，要确保索引不要越界，记得最后一个元素的索引是<code>len(name) - 1</code></p>\n<p>list中可以包含其他的list，用<code>pop()</code>删除元素<br><strong>tuple</strong></p>\n<p>元组，初始化不可修改</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">classmates = (<span class=\"string\">'Michael'</span>, <span class=\"string\">'Bob'</span>, <span class=\"string\">'Tracy'</span>)</span><br><span class=\"line\">t = (<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, [<span class=\"string\">'A'</span>, <span class=\"string\">'B'</span>])</span><br><span class=\"line\">t[<span class=\"number\">2</span>][<span class=\"number\">0</span>] = <span class=\"string\">'X'</span></span><br><span class=\"line\">t[<span class=\"number\">2</span>][<span class=\"number\">1</span>] = <span class=\"string\">'Y'</span></span><br><span class=\"line\">print(t)</span><br></pre></td></tr></table></figure>\n<p>输出为</p>\n<blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; (&apos;a&apos;, &apos;b&apos;, [&apos;X&apos;, &apos;Y&apos;])</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure>\n</blockquote>\n<p>其中指向t[2]的指针没有改变，但是<code>t[2][0]</code>和<code>t[2][1]</code>的赋值改变了，故tuple还是不变的</p>\n<p><strong>dict</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>d = &#123;<span class=\"string\">'Michael'</span>: <span class=\"number\">95</span>, <span class=\"string\">'Bob'</span>: <span class=\"number\">75</span>, <span class=\"string\">'Tracy'</span>: <span class=\"number\">85</span>&#125;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>d[<span class=\"string\">'Michael'</span>]</span><br><span class=\"line\"><span class=\"number\">95</span></span><br></pre></td></tr></table></figure>\n<p>访问方式d[‘x’]来访问key对应的value</p>\n<p>通过dict提供的<code>get()</code>方法，如果key不存在，可以返回<code>None</code>，或者自己指定的value</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>d.get(<span class=\"string\">'Thomas'</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>d.get(<span class=\"string\">'Thomas'</span>, <span class=\"number\">-1</span>)</span><br><span class=\"line\"><span class=\"number\">-1</span></span><br></pre></td></tr></table></figure>\n<p>要避免key不存在的错误，有两种办法，一是通过<code>in</code>判断key是否存在：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">'Thomas'</span> <span class=\"keyword\">in</span> d</span><br><span class=\"line\"><span class=\"keyword\">False</span></span><br></pre></td></tr></table></figure>\n<p>由key确定value存储位置</p>\n<p>要删除一个key，用<code>pop(key)</code>方法，对应的value也会从dict中删除</p>\n<p>key通过哈希求得value的存储位置，故key的值不可变</p>\n<p><strong>set</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>s = set([<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">3</span>])</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>s</span><br><span class=\"line\">&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>&#125;</span><br></pre></td></tr></table></figure>\n<p>通过<code>add(key)</code>方法可以添加元素到set中，可以重复添加，但不会有效果</p>\n<p>通过<code>remove(key)</code>方法可以删除元素，删除不存在的元素报错</p>\n<p><strong>不可变对象str</strong></p>\n<p>而对于不可变对象，比如str，对str进行操作呢：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a = <span class=\"string\">'abc'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a.replace(<span class=\"string\">'a'</span>, <span class=\"string\">'A'</span>)</span><br><span class=\"line\"><span class=\"string\">'Abc'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a</span><br><span class=\"line\"><span class=\"string\">'abc'</span></span><br></pre></td></tr></table></figure>\n<p>虽然字符串有个<code>replace()</code>方法，也确实变出了<code>&#39;Abc&#39;</code>，但变量<code>a</code>最后仍是<code>&#39;abc&#39;</code></p>\n<h3 id=\"条件判断与循环\"><a href=\"#条件判断与循环\" class=\"headerlink\" title=\"条件判断与循环\"></a>条件判断与循环</h3><p><strong>判断</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"number\">3</span> &gt; <span class=\"number\">1</span>:</span><br><span class=\"line\">    print(<span class=\"string\">\"3 &gt; 1\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    printf(<span class=\"string\">\"3 &lt;= 1\"</span>)</span><br></pre></td></tr></table></figure>\n<p>elif是else if的缩写</p>\n<p>不要忘记引号</p>\n<p>if x：</p>\n<p>只要<code>x</code>是非零数值、非空字符串、非空list等，就判断为<code>True</code>，否则为<code>False</code></p>\n<p>input(’please enter a str‘) 返回类型是str</p>\n<p>int() 将str转为int</p>\n<p><strong>循环</strong></p>\n<p><code>for x in ...</code>循环，把每个元素代入变量<code>x</code>，然后执行缩进块的语句</p>\n<p><code>range()</code>函数，可以生成一个整数序列</p>\n<p><code>list()</code>函数可以转换为list</p>\n<p>类似的还有while循环 <code>while x &gt; 0:</code></p>\n<p>可以使用break和continue</p>\n<h3 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h3><p>sum()函数参数为一个list</p>\n <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(<span class=\"string\">'sum([1, 2, 3]) ='</span>, sum([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]))</span><br></pre></td></tr></table></figure>\n<p>max()与min()可以含有多个参数</p>\n<p>更多可见<a href=\"https://docs.python.org/3/library/functions.html#abs\" target=\"_blank\" rel=\"noopener\">Python函数文档</a></p>\n<p><strong>定义函数</strong></p>\n<p>在Python中，定义一个函数要使用<code>def</code>语句，依次写出函数名、括号、括号中的参数和冒号<code>:</code>，然后，在缩进块中编写函数体，函数的返回值用<code>return</code>语句返回</p>\n <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">bigger</span><span class=\"params\">(a, b)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> a &gt;= b:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> b</span><br></pre></td></tr></table></figure>\n<p>如果没有<code>return</code>语句，函数执行完毕后也会返回结果，只是结果为<code>None</code>。<code>return None</code>可以简写为<code>return</code></p>\n<p>可以在空函数里加入pass语句，在暂时没想好函数要干什么的时候，来保持函数的通顺。</p>\n<p><strong>返回多个值</strong></p>\n<p>python返回多个值时，返回的是tuple，按位赋予返回的值</p>\n<p><strong>import</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> math</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">move</span><span class=\"params\">(x, y, step, angle=<span class=\"number\">0</span>)</span>:</span></span><br><span class=\"line\">    nx = x + step * math.cos(angle)</span><br><span class=\"line\">    ny = y - step * math.sin(angle)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> nx, ny</span><br></pre></td></tr></table></figure>\n<p><code>import math</code>语句表示导入<code>math</code>包，并允许后续代码引用<code>math</code>包里的<code>sin</code>、<code>cos</code>等函数。</p>\n<p><strong>默认参数</strong></p>\n<p>定义默认参数要牢记一点：默认参数必须指向不变对象！</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add_end</span><span class=\"params\">(L=None)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> L <span class=\"keyword\">is</span> <span class=\"keyword\">None</span>:</span><br><span class=\"line\">        L = []</span><br><span class=\"line\">    L.append(<span class=\"string\">'END'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> L</span><br></pre></td></tr></table></figure>\n<p>现在，无论调用多少次，都不会有问题：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>add_end()</span><br><span class=\"line\">[<span class=\"string\">'END'</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>add_end()</span><br><span class=\"line\">[<span class=\"string\">'END'</span>]</span><br></pre></td></tr></table></figure>\n<p><strong>可变参数</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">calc</span><span class=\"params\">(*numbers)</span>:</span></span><br><span class=\"line\">    sum = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> numbers:</span><br><span class=\"line\">        sum = sum + n * n</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sum</span><br></pre></td></tr></table></figure>\n<p>输入为</p>\n<p>calc(1, 2, 3)</p>\n<p>如果函数定义为</p>\n<p>def calc(**num)</p>\n<p>则num为list或tuple</p>\n<p><strong>关键字参数</strong></p>\n<p>而关键字参数允许你传入0个或任意个含参数名的参数，这些关键字参数在函数内部自动组装为一个dict。请看示例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">person</span><span class=\"params\">(name, age, **kw)</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">'name:'</span>, name, <span class=\"string\">'age:'</span>, age, <span class=\"string\">'other:'</span>, kw)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>person(<span class=\"string\">'Bob'</span>, <span class=\"number\">35</span>, city=<span class=\"string\">'Beijing'</span>)</span><br><span class=\"line\">name: Bob age: <span class=\"number\">35</span> other: &#123;<span class=\"string\">'city'</span>: <span class=\"string\">'Beijing'</span>&#125;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>person(<span class=\"string\">'Adam'</span>, <span class=\"number\">45</span>, gender=<span class=\"string\">'M'</span>, job=<span class=\"string\">'Engineer'</span>)</span><br><span class=\"line\">name: Adam age: <span class=\"number\">45</span> other: &#123;<span class=\"string\">'gender'</span>: <span class=\"string\">'M'</span>, <span class=\"string\">'job'</span>: <span class=\"string\">'Engineer'</span>&#125;</span><br></pre></td></tr></table></figure>\n<p>当然，上面复杂的调用可以用简化的写法：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>extra = &#123;<span class=\"string\">'city'</span>: <span class=\"string\">'Beijing'</span>, <span class=\"string\">'job'</span>: <span class=\"string\">'Engineer'</span>&#125;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>person(<span class=\"string\">'Jack'</span>, <span class=\"number\">24</span>, **extra)</span><br><span class=\"line\">name: Jack age: <span class=\"number\">24</span> other: &#123;<span class=\"string\">'city'</span>: <span class=\"string\">'Beijing'</span>, <span class=\"string\">'job'</span>: <span class=\"string\">'Engineer'</span>&#125;</span><br></pre></td></tr></table></figure>\n<p><code>**extra</code>表示把<code>extra</code>这个dict的所有key-value用关键字参数传入到函数的<code>**kw</code>参数，<code>kw</code>将获得一个dict，注意<code>kw</code>获得的dict是<code>extra</code>的一份拷贝，对<code>kw</code>的改动不会影响到函数外的<code>extra</code>。</p>\n<p><strong>命名关键字函数</strong></p>\n<p>和关键字参数<code>**kw</code>不同，命名关键字参数需要一个特殊分隔符<code>*</code>，<code>*</code>后面的参数被视为命名关键字参数。</p>\n<p>如果要限制关键字参数的名字，就可以用命名关键字参数，例如，只接收<code>city</code>和<code>job</code>作为关键字参数。这种方式定义的函数如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">person</span><span class=\"params\">(name, age, *, city, job)</span>:</span></span><br><span class=\"line\">    print(name, age, city, job)</span><br></pre></td></tr></table></figure>\n<p><strong>参数组合</strong></p>\n<p>可以用必选参数、默认参数、可变参数、关键字参数和命名关键字参数，这5种参数都可以组合使用。但是请注意，参数定义的顺序必须是：必选参数、默认参数、可变参数、命名关键字参数和关键字参数。</p>\n<p><a href=\"https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/001431752945034eb82ac80a3e64b9bb4929b16eeed1eb9000\" target=\"_blank\" rel=\"noopener\">函数的参数详解</a></p>\n<h3 id=\"递归\"><a href=\"#递归\" class=\"headerlink\" title=\"递归\"></a>递归</h3><p><strong>尾递归优化</strong></p>\n<p>尾递归是指，在函数返回的时候，调用自身本身，并且，return语句不能包含表达式。这样，编译器或者解释器就可以把尾递归做优化，使递归本身无论调用多少次，都只占用一个栈帧，不会出现栈溢出的情况。</p>\n<p>如阶乘递归</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">fact</span><span class=\"params\">(n)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> fact_iter(n, <span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">fact_iter</span><span class=\"params\">(num, product)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> num == <span class=\"number\">1</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> product</span><br><span class=\"line\">    <span class=\"keyword\">return</span> fact_iter(num - <span class=\"number\">1</span>, num * product)</span><br></pre></td></tr></table></figure>\n<p>Python解释器也没有针对尾递归优化，所以即使把上面的<code>fact(n)</code>函数改成尾递归方式，也会导致栈溢出。</p>\n<p>。。。</p>\n<p>（本文基于廖雪峰的Python教程）</p>\n","tags":[{"name":"Python","slug":"Python","permalink":"http://yoursite.com/tags/Python/"}]},{"title":"当我谈复读时我谈些什么","date":"2018-03-29T16:02:21.000Z","path":"2018/03/30/fudu/","content":"<blockquote>\n<p>回忆是一条没有尽头的路。</p>\n<p>​                        ——加西亚·马尔克斯</p>\n</blockquote>\n<p>​    当我想起复习时的那段时光，更多的是回忆那时的不容易。我下意识说出来的话更像是：那时候虽然很累很艰苦，可是很努力，那是我一生的回忆，我绝不会忘记那段日子。说实话，当我写下这几个字的时候，我还是仍有一种热泪盈眶的感觉，哪怕复读都是两年前的事了。在这篇文章里，我想去试着还原那时经历的事和我的感受。只不过我更希望做一个结尾，来告别这种难以言喻的情怀，是时候和自我感动说再见了。</p>\n<a id=\"more\"></a>\n<h2 id=\"高考落榜\"><a href=\"#高考落榜\" class=\"headerlink\" title=\"高考落榜\"></a>高考落榜</h2><p>​    延续了初中时的贪玩，高中时的我还是一个懵懂迷糊的孩子。被父母推着走，玩玩游戏看看课外书，想着喜欢的姑娘发呆。等要进高三我才想起来学习，但我所做的努力现在看来收效甚微，而且还让当时的我压力巨大。每天处在一种睡不醒又学不进去的状态，买了一堆书又不做，自己欺骗自己。因为碰到了一个好的英语老师，我的成绩也有了提升。但也因为惰性，不去学那些对我而言很难的部分(例如物理化学)，本质上我还是什么都不懂，排名和模拟成绩麻痹了我，我还是老样子。家里帮我找了辅导老师，但我真正学到的没有多少。现在想想，那时还没有现在的自学能力，而且知识的积累是一个循序渐进的过程，几节课、一个假期又能学到多少呢。</p>\n<p>​    高考之前我接触到了知乎，那时候的知乎还是一个以知识经验分享为主的社区，没有那么多泛娱乐化的内容。在上面我了解到了很多东西，我知道了还有那么多厉害的人，也第一次对程序员这个职业产生兴趣。甚至在高考一个月买了一本《C primer plus》，在夜里读绝影写的《疯狂的程序员》。那时候的我，大概是慌张不知所措，而又想要改变的吧。</p>\n<p>​    还记得高考之前睡不着，一直到四点。我当时也明白自己的真实水平，紧张也在所难免。还记得考完回到家里，我第一感觉是解放了，未来的生活有了新开始。但当我缓过神来，对答案的时候，我才明白自己做的还不够。夜里我和父亲吵了起来。起因是当天夜里我想了解更多有关复读的信息，而父亲想让我早点睡觉。我明白他看到我的颓废也很伤心。发成绩的那天，得知初中时的朋友也没考好之后，我们相约到临县去复习。</p>\n<h2 id=\"复读之路\"><a href=\"#复读之路\" class=\"headerlink\" title=\"复读之路\"></a>复读之路</h2><p>​    不知不觉又开始回忆了。复读时真正开始学一些东西，成绩有所提升。那时候在放假的时候看了很多书，也总在思考。算是很不错的状态。</p>\n<p>​    复读的事暂不详述了。</p>\n<h2 id=\"是时候说再见了\"><a href=\"#是时候说再见了\" class=\"headerlink\" title=\"是时候说再见了\"></a>是时候说再见了</h2><p>​    写这篇文章是因为，想到大学以来我对自己的失望，对复读时期的怀念，我把太多的情绪寄托在那时的我身上了。总以为那时候的样子就是完美的奋斗状态，让我在生活的很多方面都太过偏执了。大一到现在，先不做具体评价。只是突然想到，和比自己年龄小的人相比，我少了心气、自律。不喜欢现在的我，这可能就是我一直以来追忆过去努力自己的原因吧。</p>\n<p>​    复读那年山东高考作文题目和行囊有关，是个很宽泛的命题。我还记得我写下的一句话，人生还有多少风景我未曾领略，怎能在此止步呢。我想对复读时的自己说，你很棒你做到了。但人生路那么长，如果我只是回忆回忆，又有什么用呢。明白想要做的，然后做吧。</p>\n","tags":[{"name":"随笔","slug":"随笔","permalink":"http://yoursite.com/tags/随笔/"}]},{"title":"快速幂","date":"2018-02-21T16:08:11.000Z","path":"2018/02/22/kuaisumi/","content":"<p><strong>问题：</strong></p>\n<p>n^n的末尾数字, 如何用快速幂求解？</p>\n<p><strong>相关内容 </strong></p>\n<p>1.&amp;按位与运算</p>\n<p>  0 &amp; 0 = 0, 0 &amp; 1 = 0, 1 &amp; 0 = 0, 1 &amp; 1 = 1</p>\n<p>2.^异或运算</p>\n<p>  0^0 = 0, 0 ^ 1 = 1, 1 ^ 0 = 1, 1 ^ 1 = 0</p>\n<a id=\"more\"></a>\n<p>3.|按位或运算</p>\n<p>  0 | 0 = 0, 0 | 1 = 1, 1 | 0 = 1, 1 | 1= 1</p>\n<p><strong>左移运算符(&lt;&lt;)</strong> <strong>右移运算符(&gt;&gt;)</strong></p>\n<p>​    右移运算将一个位串信息向右移指定的位，右端移出的位的信息被丢弃。例如12&gt;&gt;2,结果为3。与左移相反，对于小整数，每右移1位，相当于除以2。在右移时，需要注意符号位问题。对无符号数据，右移时，左端空出的位用0补充。对于带符号的数据，如果移位前符号位为0(正数)，则左端也是用0补充；如果移位前符号位为1(负数)，则左端用0或用1补充，取决于计算机系统。对于负数右移，称用0补充的系统为“逻辑右移”，用1补充的系统为“算术右移”。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;  </span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span>  </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> m;  </span><br><span class=\"line\">    <span class=\"built_in\">cin</span> &gt;&gt; m;  </span><br><span class=\"line\">    <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> index = m;  </span><br><span class=\"line\">    <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> base = m;  </span><br><span class=\"line\">    <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ans = <span class=\"number\">1</span>;  </span><br><span class=\"line\">    <span class=\"keyword\">while</span>(index &gt; <span class=\"number\">0</span>)&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(index &amp; <span class=\"number\">1</span>)  </span><br><span class=\"line\">            ans = (ans * base) % <span class=\"number\">10</span>;  </span><br><span class=\"line\">        base = (base * base) % <span class=\"number\">10</span>;  </span><br><span class=\"line\">        index &gt;&gt;= <span class=\"number\">1</span>;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; ans % <span class=\"number\">10</span>;  </span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","tags":[{"name":"快速幂","slug":"快速幂","permalink":"http://yoursite.com/tags/快速幂/"},{"name":"算法","slug":"算法","permalink":"http://yoursite.com/tags/算法/"}]},{"title":"临近期末写的数据结构总结","date":"2018-02-21T15:59:48.000Z","path":"2018/02/21/shujvjiegou/","content":"<h2 id=\"数组和广义表以及树的基本概念\"><a href=\"#数组和广义表以及树的基本概念\" class=\"headerlink\" title=\"数组和广义表以及树的基本概念\"></a>数组和广义表以及树的基本概念</h2><p>​    <strong>T4</strong> 若对n阶对称矩阵A以行序为主序方式将其下三角形的元素(包括主对角线上所有元素)依次存放于一维数组B［1..(n(n+1))/2］中，则在B中确定aij<strong>（i&lt;j）</strong>的位置k的关系为 j * (j - 1) / 2 + i</p>\n<p>当i &gt; j 时，k的位置关系为i * (i - 1) / 2 + j</p>\n<p>如    11  12</p>\n<p>​    21  22  的对称矩阵 ，其一维数组是B[a11 a21 a22]</p>\n<p>求a12的k，实则是求a21,又因为j &gt; i, 所以有j * (j - 1) / 2 + i</p>\n<a id=\"more\"></a>\n<p><strong>T5</strong>广义表的操作</p>\n<p>tail()去掉表头第一个元素，保留尾部</p>\n<p>head()去掉表末尾最后一个元素，保留头部</p>\n<p>​    已知广义表L=（（x,y,z），a，（u，t，w）），从L表中取出原子项t的运算是    </p>\n<p>head（tail(head（tail（tail（L）））））</p>\n<p><strong>广义表基本概念</strong></p>\n<p>​    <strong>表长</strong>：第一层元素个数，原子或子表算一个</p>\n<p>​    <strong>表深</strong>：最大嵌套次数</p>\n<h2 id=\"二叉树\"><a href=\"#二叉树\" class=\"headerlink\" title=\"二叉树\"></a>二叉树</h2><p>已知后序遍历和中序遍历，求前序遍历，从后往前看</p>\n<p>已知前序遍历和中序遍历，求后序遍历，从前往后看</p>\n<p>​    <strong>T15</strong>某二叉树的前序和后序遍历序列正好相反，则该二叉树一定是</p>\n<p>高度等于其结点数</p>\n<p>​    <strong>T7</strong>如果一棵非空k（k≥2）叉树T中每个非叶子结点都有k个孩子，则称T为正则k叉树。若T有m个非叶子结点，则T中的叶子结点个数为</p>\n<p>​    k^(n - 1)  -  1 / (k - 1)  = m</p>\n<p>​    叶子结点为k ^ (n  -  1)， 即m(k  - 1) + 1</p>\n<p><strong>任何一棵树的叶子结点在前序、中序和后序遍历中的相对次序不发生改变</strong></p>\n<ul>\n<li>求根节点</li>\n</ul>\n<p>边数e  = n - 1</p>\n<p>结点数n  = n0 + n1 + n2 +……</p>\n<p>且边数e = 1 <em> n1 + 2 </em> n2 + 3 * n3+ ……</p>\n<p>所以根结点n0 =  n2 + 2 <em> n3 + 3 </em> n4 + …… + 1</p>\n<ul>\n<li>正则k叉树的度为n则说明树的最大度为n</li>\n</ul>\n<h2 id=\"树和森林\"><a href=\"#树和森林\" class=\"headerlink\" title=\"树和森林\"></a>树和森林</h2><ul>\n<li>若一个具有N个结点K条边的非连通无向图是森林,则该森林中必有N-K棵树</li>\n</ul>\n<pre><code>将森林转换为对应的二叉树，若在二叉树中，结点u是结点v的父结点的父结点，则在原来的森林中，u和v可能具有的关系是： \n</code></pre><ol>\n<li>父子关系； 2. 兄弟关系； 3. u的父结点与v的父结点是兄弟关系</li>\n</ol>\n<p>还原到森林看u和v的关系</p>\n<ul>\n<li><strong>T7</strong> 已知一棵完全二叉树的第6层（设根为第1层）有8个叶结点，则该完全二叉树的结点个数最多是</li>\n<li><strong>T8</strong>在一个用数组表示的完全二叉树中，如果根结点下标为1，那么下标为17和19这两个结点的最近公共祖先结点在哪里（数组下标）？ （注：两个结点的“公共祖先结点”是指同时都是这两个结点祖先的结点）公共祖先结点为4</li>\n<li><strong>树的先根序遍历</strong>代码和二叉树的先序遍历基本相同</li>\n<li>对二叉链表进行中序遍历，对应到树上是<strong>树的后根序遍历</strong> ，代码和二叉树的中序遍历基本相同</li>\n</ul>\n<h2 id=\"Huffman树\"><a href=\"#Huffman树\" class=\"headerlink\" title=\"Huffman树\"></a>Huffman树</h2><p>WPL</p>\n<h2 id=\"图的概念-存储结构和遍历\"><a href=\"#图的概念-存储结构和遍历\" class=\"headerlink\" title=\"图的概念 存储结构和遍历\"></a>图的概念 存储结构和遍历</h2><p>用邻接表法存储图，占用的存储空间数只与图中结点个数有关，而与边数无关</p>\n<p>用邻接矩阵法存储图，占用的存储空间数只与图中结点个数有关，而与边数无关</p>\n<p>在一个有向图中，所有顶点的入度和出度之和等于所有边之和的两倍</p>\n<p>在任一有向图中，所有顶点的入度之和等于所有顶点的出度之和</p>\n<p>如果 G 是有向图 ，那么连接i和j的路径中所有的边都必须同向。如果图中任意两点都是连通的，那么图被称作连通图。如果此图是有向图，则称为强连通图（注意：需要双向都有路径）</p>\n<p>有向图的极大强连通子图称为G的强连通分量。</p>\n<blockquote>\n<p>有n个顶点的强连通图最多有n（n-1）条边，最少有n条边。</p>\n<p>解释如下：</p>\n<p>强连通图（Strongly Connected Graph）是指一个有向图（Directed Graph）中任意两点v1、v2间存在v1到v2的路径（path）及v2到v1的路径的图。</p>\n<p>最多的情况：</p>\n<p>即n个顶点中两两相连，若不计方向，n个点两两相连有n（n-1）/2条边，而由于强连通图是有向图，故每条边有两个方向，n（n-1）/2×2=n（n-1），故有n个顶点的强连通图最多有n（n-1）条边。</p>\n<p>最少的情况：</p>\n<p>即n个顶点围成一个圈，且圈上各边方向一致，即均为顺时针或者逆时针，此时有n条边。</p>\n<p>举例：</p>\n<p>如下图ABCD四个点构成强连通图</p>\n<p>边数最多有4×3=12条，</p>\n<p>边数最少有4条</p>\n</blockquote>\n<p>分辨深度优先搜索、广度优先搜索</p>\n<p>分辨边数和度数</p>\n<p>Dijkstra算法</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> N 1000</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> INF 99999999</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> n, m, s, d;</span><br><span class=\"line\"><span class=\"keyword\">int</span> teams[N];</span><br><span class=\"line\"><span class=\"keyword\">int</span> mp[N][N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">bool</span> vis[N];</span><br><span class=\"line\"><span class=\"keyword\">int</span> pre[N];</span><br><span class=\"line\"><span class=\"keyword\">int</span> amount[N];</span><br><span class=\"line\"><span class=\"keyword\">int</span> pathCount[N];</span><br><span class=\"line\"><span class=\"keyword\">int</span> dis[N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Dijkstra</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        pathCount[i] = <span class=\"number\">0</span>;</span><br><span class=\"line\">        vis[i] = <span class=\"literal\">false</span>;</span><br><span class=\"line\">        amount[i] = teams[i];</span><br><span class=\"line\">        pre[i] = <span class=\"number\">-1</span>;</span><br><span class=\"line\">        dis[i] = mp[s][i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    pathCount[s] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    dis[s] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    vis[s] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> newP = s;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (newP != d)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; n; i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!vis[i])</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"comment\">//</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (dis[newP] + mp[newP][i] &lt; dis[i])</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    dis[i] = dis[newP] + mp[newP][i];</span><br><span class=\"line\">                    pathCount[i] = pathCount[newP];</span><br><span class=\"line\">                    amount[i] = amount[newP] + teams[i];</span><br><span class=\"line\">                    pre[i] = newP;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (dis[newP] + mp[newP][i] == dis[i])</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    pathCount[i] += pathCount[newP];</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (amount[newP] + teams[i] &gt; amount[i])</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        amount[i] = amount[newP] + teams[i];</span><br><span class=\"line\">                        pre[i] = newP;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;<span class=\"comment\">// if</span></span><br><span class=\"line\">        &#125;<span class=\"comment\">// for</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">int</span> minn = INF;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; n; i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!vis[i] &amp;&amp; dis[i] &lt; minn)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                minn = dis[i];</span><br><span class=\"line\">                newP = i;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        vis[newP] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;<span class=\"comment\">// while</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//freopen(\"in\", \"r\", stdin);</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d%d%d\"</span>, &amp;n,&amp;m,&amp;s,&amp;d) != EOF)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> i,j;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; n; i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>, &amp;teams[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; n; i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (j = <span class=\"number\">0</span>; j &lt; n; j++)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                mp[i][j] = INF;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            mp[i][i] = <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> tmpi, tmpj,tmpdist;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; m; i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d%d%d\"</span>, &amp;tmpi, &amp;tmpj, &amp;tmpdist);</span><br><span class=\"line\">            mp[tmpi][tmpj] = tmpdist;</span><br><span class=\"line\">            mp[tmpj][tmpi] = tmpdist;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        Dijkstra();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d %d\\n\"</span>, pathCount[d], amount[d]);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; v;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> lenv = <span class=\"number\">0</span>;</span><br><span class=\"line\">        v.clear();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> vn = d;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (vn != <span class=\"number\">-1</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            v.push_back(vn);</span><br><span class=\"line\">            lenv++;</span><br><span class=\"line\">            vn = pre[vn];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\"</span>, v[lenv<span class=\"number\">-1</span>]);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (i = lenv<span class=\"number\">-2</span>; i &gt;= <span class=\"number\">0</span>; i--)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">\" %d\"</span>, v[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"\\n\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>平衡因子 = 左子树深度 - 右子树深度</strong></p>\n<p><strong>求解nextval：</strong></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">求nextval数组值有两种方法，一种是不依赖next数组值直接用观察法求得，一种方法是根据next数组值进行推理，两种方法均可使用，视更喜欢哪种方法而定。</span><br><span class=\"line\"></span><br><span class=\"line\">　   本文主要分析nextval数组值的第二种方法：</span><br><span class=\"line\"></span><br><span class=\"line\">　　模式串      a b a a b c a c</span><br><span class=\"line\"></span><br><span class=\"line\">　　next值      <span class=\"number\">0</span> <span class=\"number\">1</span> <span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">2</span> <span class=\"number\">3</span> <span class=\"number\">1</span> <span class=\"number\">2</span></span><br><span class=\"line\"></span><br><span class=\"line\">　　nextval值   <span class=\"number\">0</span> <span class=\"number\">1</span> <span class=\"number\">0</span> <span class=\"number\">2</span> <span class=\"number\">1</span> <span class=\"number\">3</span> <span class=\"number\">0</span> <span class=\"number\">2</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">　　<span class=\"number\">1.</span>第一位的nextval值必定为<span class=\"number\">0</span>，第二位如果于第一位相同则为<span class=\"number\">0</span>，如果不同则为<span class=\"number\">1</span>。</span><br><span class=\"line\"></span><br><span class=\"line\">　　<span class=\"number\">2.</span>第三位的next值为<span class=\"number\">1</span>，那么将第三位和第一位进行比较，均为a，相同，则，第三位的nextval值为<span class=\"number\">0</span>。</span><br><span class=\"line\"></span><br><span class=\"line\">　　<span class=\"number\">3.</span>第四位的next值为<span class=\"number\">2</span>，那么将第四位和第二位进行比较，不同，则第四位的nextval值为其next值，为<span class=\"number\">2</span>。</span><br><span class=\"line\"></span><br><span class=\"line\">　　<span class=\"number\">4.</span>第五位的next值为<span class=\"number\">2</span>，那么将第五位和第二位进行比较，相同，第二位的next值为<span class=\"number\">1</span>，则继续将第二位与第一位进行比较，不同，则第五位的nextval值为第二位的next值，为<span class=\"number\">1</span>。</span><br><span class=\"line\"></span><br><span class=\"line\">　　<span class=\"number\">5.</span>第六位的next值为<span class=\"number\">3</span>，那么将第六位和第三位进行比较，不同，则第六位的nextval值为其next值，为<span class=\"number\">3</span>。</span><br><span class=\"line\"></span><br><span class=\"line\">　　<span class=\"number\">6.</span>第七位的next值为<span class=\"number\">1</span>，那么将第七位和第一位进行比较，相同，则第七位的nextval值为<span class=\"number\">0</span>。</span><br><span class=\"line\"></span><br><span class=\"line\">　　<span class=\"number\">7.</span>第八位的next值为<span class=\"number\">2</span>，那么将第八位和第二位进行比较，不同，则第八位的nextval值为其next值，为<span class=\"number\">2</span>。</span><br></pre></td></tr></table></figure>\n","tags":[{"name":"数据结构","slug":"数据结构","permalink":"http://yoursite.com/tags/数据结构/"}]},{"title":"我的名字","date":"2018-02-21T15:27:05.000Z","path":"2018/02/21/mingzi/","content":"<blockquote>\n<p>我的名字对你有什么意义？<br>它会死去，<br>像大海拍击海堤，<br>发出的忧郁的汩汩涛声，<br>像密林中幽幽的夜声。<br>它会在纪念册的黄页上<br>留下暗淡的印痕，<br>就像用无人能懂的语言<br>在墓碑上刻下的花纹。<br><a id=\"more\"></a><br>它有什么意义？<br>它早已被忘记<br>在新的激烈的风浪里，<br>它不会给你的心灵<br>带来纯洁、温柔的回忆。<br>但是在你孤独、悲伤的日子，<br>请你悄悄地念一念我的名字，<br>并且说：有人在思念我，<br>在世间我活在一个人的心里。 </p>\n</blockquote>\n<p>​    这是一首普希金的诗，在一段日子里我很喜欢它。</p>\n","tags":[{"name":"摘记","slug":"摘记","permalink":"http://yoursite.com/tags/摘记/"}]},{"title":"next_permutation的用法","date":"2018-02-21T13:13:23.000Z","path":"2018/02/21/permutation/","content":"<h1 id=\"next-permutation的用法\"><a href=\"#next-permutation的用法\" class=\"headerlink\" title=\"next_permutation的用法\"></a>next_permutation的用法</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">include &lt;bits/stdc++.h&gt;</span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> N[] = &#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(next_permutation(N, N + <span class=\"number\">3</span>))&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; ++i)</span><br><span class=\"line\">            <span class=\"built_in\">cout</span> &lt;&lt; N[i];</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>排序，输出全排列，返回值为bool类型</p>\n<a id=\"more\"></a>","tags":[{"name":"algorithm","slug":"algorithm","permalink":"http://yoursite.com/tags/algorithm/"}]}]